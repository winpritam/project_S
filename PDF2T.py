import os
# web frameworks
from flask import Flask, request, jsonify, abort
from flask import Flask, render_template, redirect, url_for
# utility tools
import json
import ast
import re
import pdfplumber
# genai stuff
from apikey import key
from formater import model as formater
import google.generativeai as genai

_global={}
genai.configure(api_key=key) # Create the model
# generation_config = {
#   "temperature": 0.95,
#   "top_p": 0.95,
#   "top_k": 64,
#   "max_output_tokens": 8192,
#   "response_mime_type": "text/plain",
# }

# model = genai.GenerativeModel(
#   model_name="gemini-1.5-flash",
#   generation_config=generation_config,
#   # safety_settings = Adjust safety settings
#   # See https://ai.google.dev/gemini-api/docs/safety-settings
# )
quiz_config = {
  "temperature": 1.45,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 2000,
  "response_mime_type": "application/json",
}

quizmodel = genai.GenerativeModel(
  model_name="gemini-1.5-flash",
  generation_config=quiz_config,
  system_instruction="topic related mcq questions , formate\n[{'Q':'what, why, how','O':{'a':'option a','b':'option b','c':'option c','d':'option d',},'A':'a'}, ]",
)

chat_session = quizmodel.start_chat(
  history=[
    {
      "role": "user",
      "parts": [
        "jankins",
      ],
    },
    {
      "role": "model",
      "parts": [
        "[\n  {\"Q\":\"What is Jenkins primarily used for?\",\n   \"O\": {\"a\":\"Version control\",\"b\":\"Continuous integration and delivery\",\"c\":\"Database management\",\"d\":\"Web development\"},\n   \"A\":\"b\"\n  },\n  {\"Q\":\"What is the core functionality of Jenkins?\",\n   \"O\": {\"a\":\"Building and testing software\",\"b\":\"Deploying applications\",\"c\":\"Monitoring system performance\",\"d\":\"All of the above\"},\n   \"A\":\"d\"\n  },\n  {\"Q\":\"What is a Jenkins pipeline?\",\n   \"O\": {\"a\":\"A series of automated tasks\",\"b\":\"A visual representation of the build process\",\"c\":\"A set of instructions for Jenkins\",\"d\":\"All of the above\"},\n   \"A\":\"d\"\n  },\n  {\"Q\":\"What is a Jenkinsfile?\",\n   \"O\": {\"a\":\"A file that defines the Jenkins pipeline\",\"b\":\"A configuration file for Jenkins\",\"c\":\"A log file generated by Jenkins\",\"d\":\"A script for automating tasks\"},\n   \"A\":\"a\"\n  },\n  {\"Q\":\"What is the recommended way to install Jenkins on Linux?\",\n   \"O\": {\"a\":\"Using a package manager\",\"b\":\"Downloading and running the WAR file\",\"c\":\"Installing from source code\",\"d\":\"All of the above\"},\n   \"A\":\"a\"\n  },\n  {\"Q\":\"Where is the Jenkins configuration file located?\",\n   \"O\": {\"a\":\"/etc/jenkins/jenkins.xml\",\"b\":\"$JENKINS_HOME/config.xml\",\"c\":\"/var/lib/jenkins/config.xml\",\"d\":\"It varies depending on the installation method\"},\n   \"A\":\"b\"\n  },\n  {\"Q\":\"How do you add plugins to Jenkins?\",\n   \"O\": {\"a\":\"Through the Jenkins web interface\",\"b\":\"Using the command line\",\"c\":\"Downloading and installing manually\",\"d\":\"All of the above\"},\n   \"A\":\"a\"\n  },\n  {\"Q\":\"Which of the following is a valid Jenkins pipeline syntax?\",\n   \"O\": {\"a\":\"groovy\",\"b\":\"python\",\"c\":\"bash\",\"d\":\"All of the above\"},\n   \"A\":\"a\"\n  },\n  {\"Q\":\"What is the purpose of the `node` directive in a Jenkinsfile?\",\n   \"O\": {\"a\":\"To define a specific build agent\",\"b\":\"To specify the environment for the pipeline\",\"c\":\"To run a stage on a specific node\",\"d\":\"All of the above\"},\n   \"A\":\"d\"\n  },\n  {\"Q\":\"What is a stage in a Jenkins pipeline?\",\n   \"O\": {\"a\":\"A logical grouping of tasks\",\"b\":\"A step in the build process\",\"c\":\"A unit of work\",\"d\":\"All of the above\"},\n   \"A\":\"d\"\n  },\n  {\"Q\":\"What is the difference between `parallel` and `stage` in a Jenkinsfile?\",\n   \"O\": {\"a\":\"`parallel` runs stages concurrently, while `stage` runs them sequentially\",\"b\":\"`stage` runs tasks concurrently, while `parallel` runs them sequentially\",\"c\":\"They are both used for running tasks in parallel\",\"d\":\"There is no difference\"},\n   \"A\":\"a\"\n  },\n  {\"Q\":\"What is the purpose of Jenkins Shared Libraries?\",\n   \"O\": {\"a\":\"To reuse code across different pipelines\",\"b\":\"To manage dependencies for pipelines\",\"c\":\"To provide a centralized repository for plugins\",\"d\":\"To create custom plugins\"},\n   \"A\":\"a\"\n  },\n]",
      ],
    },
    {
      "role": "user",
      "parts": [
        "Docker Containers",
      ],
    },
    {
      "role": "model",
      "parts": [
        "[\n  {\n    \"Q\": \"What is the primary purpose of Docker containers?\",\n    \"O\": {\n      \"a\": \"To create and manage virtual machines\",\n      \"b\": \"To package and run applications in isolated environments\",\n      \"c\": \"To develop web applications\",\n      \"d\": \"To manage databases\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What is a Docker image?\",\n    \"O\": {\n      \"a\": \"A running instance of a Docker container\",\n      \"b\": \"A template for creating Docker containers\",\n      \"c\": \"A virtual machine\",\n      \"d\": \"A file system for Docker containers\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What command is used to build a Docker image?\",\n    \"O\": {\n      \"a\": \"docker run\",\n      \"b\": \"docker pull\",\n      \"c\": \"docker build\",\n      \"d\": \"docker push\"\n    },\n    \"A\": \"c\"\n  },\n  {\n    \"Q\": \"What is a Dockerfile?\",\n    \"O\": {\n      \"a\": \"A script that defines the steps for building a Docker image\",\n      \"b\": \"A configuration file for Docker\",\n      \"c\": \"A log file generated by Docker\",\n      \"d\": \"A container registry\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"Which of the following is NOT a benefit of using Docker containers?\",\n    \"O\": {\n      \"a\": \"Improved portability\",\n      \"b\": \"Reduced resource consumption\",\n      \"c\": \"Increased security\",\n      \"d\": \"Reduced development time\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"What is a Docker Hub?\",\n    \"O\": {\n      \"a\": \"A container runtime\",\n      \"b\": \"A container registry\",\n      \"c\": \"A Docker command\",\n      \"d\": \"A Docker image\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `docker pull` command?\",\n    \"O\": {\n      \"a\": \"To build a Docker image\",\n      \"b\": \"To run a Docker container\",\n      \"c\": \"To download a Docker image from a registry\",\n      \"d\": \"To push a Docker image to a registry\"\n    },\n    \"A\": \"c\"\n  },\n  {\n    \"Q\": \"Which command is used to start a Docker container?\",\n    \"O\": {\n      \"a\": \"docker build\",\n      \"b\": \"docker run\",\n      \"c\": \"docker stop\",\n      \"d\": \"docker ps\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What is a Docker volume?\",\n    \"O\": {\n      \"a\": \"A persistent storage mechanism for Docker containers\",\n      \"b\": \"A type of Docker image\",\n      \"c\": \"A Docker network\",\n      \"d\": \"A container registry\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of Docker Compose?\",\n    \"O\": {\n      \"a\": \"To manage multiple Docker containers as a single unit\",\n      \"b\": \"To build Docker images\",\n      \"c\": \"To run Docker containers on a remote server\",\n      \"d\": \"To create Docker networks\"\n    },\n    \"A\": \"a\"\n  }\n]\n",
      ],
    },
    {
      "role": "user",
      "parts": [
        "Laravel routing",
      ],
    },
    {
      "role": "model",
      "parts": [
        "[\n  {\n    \"Q\": \"What is the primary function of Laravel routing?\",\n    \"O\": {\n      \"a\": \"Connecting database tables\",\n      \"b\": \"Managing user authentication\",\n      \"c\": \"Mapping URLs to controllers and methods\",\n      \"d\": \"Rendering HTML templates\"\n    },\n    \"A\": \"c\"\n  },\n  {\n    \"Q\": \"Which file is responsible for defining routes in Laravel?\",\n    \"O\": {\n      \"a\": \"app/Http/routes.php\",\n      \"b\": \"app/Http/Kernel.php\",\n      \"c\": \"routes/web.php\",\n      \"d\": \"config/app.php\"\n    },\n    \"A\": \"c\"\n  },\n  {\n    \"Q\": \"What is the syntax for defining a basic GET route in Laravel?\",\n    \"O\": {\n      \"a\": \"Route::get('/path', 'Controller@method');\",\n      \"b\": \"Route::path('/path', 'Controller@method');\",\n      \"c\": \"Route::define('/path', 'Controller@method');\",\n      \"d\": \"Route::map('/path', 'Controller@method');\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"How do you define a route that accepts both GET and POST requests?\",\n    \"O\": {\n      \"a\": \"Route::any('/path', 'Controller@method');\",\n      \"b\": \"Route::match(['get', 'post'], '/path', 'Controller@method');\",\n      \"c\": \"Route::group(['methods' => ['get', 'post']], function () { ... });\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"What is the purpose of route parameters in Laravel?\",\n    \"O\": {\n      \"a\": \"To pass data to the controller\",\n      \"b\": \"To match dynamic parts of the URL\",\n      \"c\": \"To define route names\",\n      \"d\": \"To handle HTTP methods\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"How do you define a route parameter in Laravel?\",\n    \"O\": {\n      \"a\": \"Route::get('/path/{parameter}', 'Controller@method');\",\n      \"b\": \"Route::get('/path/:parameter', 'Controller@method');\",\n      \"c\": \"Route::get('/path?parameter', 'Controller@method');\",\n      \"d\": \"Route::get('/path#parameter', 'Controller@method');\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of route groups in Laravel?\",\n    \"O\": {\n      \"a\": \"To organize routes into logical groups\",\n      \"b\": \"To apply middleware to multiple routes\",\n      \"c\": \"To define route prefixes\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"How do you define a route group in Laravel?\",\n    \"O\": {\n      \"a\": \"Route::group(['prefix' => '/admin'], function () { ... });\",\n      \"b\": \"Route::group(['middleware' => 'auth'], function () { ... });\",\n      \"c\": \"Route::group(['domain' => 'admin.example.com'], function () { ... });\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"What is the purpose of route names in Laravel?\",\n    \"O\": {\n      \"a\": \"To make routes easier to reference\",\n      \"b\": \"To generate URLs from routes\",\n      \"c\": \"To improve code readability\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"How do you define a route name in Laravel?\",\n    \"O\": {\n      \"a\": \"Route::get('/path', 'Controller@method')->name('route.name');\",\n      \"b\": \"Route::get('/path', 'Controller@method')->as('route.name');\",\n      \"c\": \"Route::get('/path', 'Controller@method')->withName('route.name');\",\n      \"d\": \"Route::get('/path', 'Controller@method')->alias('route.name');\"\n    },\n    \"A\": \"a\"\n  }\n]",
      ],
    },
    {
      "role": "user",
      "parts": [
        "spring jdbc",
      ],
    },
    {
      "role": "model",
      "parts": [
        "[\n  {\n    \"Q\": \"What is Spring JDBC?\",\n    \"O\": {\n      \"a\": \"A Java library for connecting to databases\",\n      \"b\": \"A framework for simplifying JDBC operations in Spring applications\",\n      \"c\": \"A database management system\",\n      \"d\": \"A tool for creating database schemas\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"Which interface is the core of Spring JDBC?\",\n    \"O\": {\n      \"a\": \"JdbcTemplate\",\n      \"b\": \"DataSource\",\n      \"c\": \"Connection\",\n      \"d\": \"PreparedStatement\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `DataSource` interface in Spring JDBC?\",\n    \"O\": {\n      \"a\": \"To establish connections to the database\",\n      \"b\": \"To execute SQL queries\",\n      \"c\": \"To handle transactions\",\n      \"d\": \"To map database results to Java objects\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"How do you configure a `DataSource` in Spring?\",\n    \"O\": {\n      \"a\": \"Using the `DataSource` class\",\n      \"b\": \"Using the `DriverManagerDataSource` class\",\n      \"c\": \"Using the `JndiDataSource` class\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"Which method of the `JdbcTemplate` interface is used to execute a query that returns multiple rows?\",\n    \"O\": {\n      \"a\": \"queryForObject()\",\n      \"b\": \"queryForList()\",\n      \"c\": \"update()\",\n      \"d\": \"batchUpdate()\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `NamedParameterJdbcTemplate` class?\",\n    \"O\": {\n      \"a\": \"To execute SQL queries with named parameters\",\n      \"b\": \"To execute SQL queries with positional parameters\",\n      \"c\": \"To manage database connections\",\n      \"d\": \"To map database results to Java objects\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"Which annotation is used to specify a named parameter in a SQL query?\",\n    \"O\": {\n      \"a\": \"@NamedParam\",\n      \"b\": \"@Param\",\n      \"c\": \"@Value\",\n      \"d\": \"@Autowired\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"How do you handle transactions in Spring JDBC?\",\n    \"O\": {\n      \"a\": \"Using the `TransactionTemplate` class\",\n      \"b\": \"Using the `@Transactional` annotation\",\n      \"c\": \"Using the `TransactionManager` interface\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `RowMapper` interface in Spring JDBC?\",\n    \"O\": {\n      \"a\": \"To map database results to Java objects\",\n      \"b\": \"To execute SQL queries\",\n      \"c\": \"To handle transactions\",\n      \"d\": \"To manage database connections\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"Which class provides a convenient way to create `RowMapper` implementations?\",\n    \"O\": {\n      \"a\": \"BeanPropertyRowMapper\",\n      \"b\": \"ResultSetExtractor\",\n      \"c\": \"SqlParameterSource\",\n      \"d\": \"JdbcTemplate\"\n    },\n    \"A\": \"a\"\n  }\n]",
      ],
    },
    {
      "role": "user",
      "parts": [
        "Docker File",
      ],
    },
    {
      "role": "model",
      "parts": [
        "```json\n[\n  {\n    \"Q\": \"What is the primary purpose of a Dockerfile?\",\n    \"O\": {\n      \"a\": \"To run a Docker container\",\n      \"b\": \"To define the steps for building a Docker image\",\n      \"c\": \"To manage Docker volumes\",\n      \"d\": \"To create Docker networks\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What is the first instruction in a typical Dockerfile?\",\n    \"O\": {\n      \"a\": \"FROM\",\n      \"b\": \"RUN\",\n      \"c\": \"COPY\",\n      \"d\": \"CMD\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What does the `FROM` instruction do in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"Specifies the base image for the new image\",\n      \"b\": \"Runs a command in the container\",\n      \"c\": \"Copies files from the host to the container\",\n      \"d\": \"Sets the default command to run when the container starts\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `RUN` instruction in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"To install packages or dependencies\",\n      \"b\": \"To copy files from the host to the container\",\n      \"c\": \"To set environment variables\",\n      \"d\": \"To define the default command to run when the container starts\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What does the `COPY` instruction do in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"Copies files from the host to the container\",\n      \"b\": \"Copies files from the container to the host\",\n      \"c\": \"Installs packages or dependencies\",\n      \"d\": \"Sets the default command to run when the container starts\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `CMD` instruction in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"To define the default command to run when the container starts\",\n      \"b\": \"To install packages or dependencies\",\n      \"c\": \"To copy files from the host to the container\",\n      \"d\": \"To set environment variables\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the difference between `CMD` and `ENTRYPOINT` in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"CMD defines the default command, while ENTRYPOINT defines a fixed command that can be overridden\",\n      \"b\": \"CMD is used for building the image, while ENTRYPOINT is used for running the container\",\n      \"c\": \"CMD can be used multiple times, while ENTRYPOINT can only be used once\",\n      \"d\": \"There is no difference\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What does the `ENV` instruction do in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"Sets environment variables\",\n      \"b\": \"Defines the default command to run when the container starts\",\n      \"c\": \"Copies files from the host to the container\",\n      \"d\": \"Installs packages or dependencies\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of the `WORKDIR` instruction in a Dockerfile?\",\n    \"O\": {\n      \"a\": \"Sets the working directory for subsequent commands\",\n      \"b\": \"Defines the default command to run when the container starts\",\n      \"c\": \"Copies files from the host to the container\",\n      \"d\": \"Installs packages or dependencies\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is a multi-stage Dockerfile?\",\n    \"O\": {\n      \"a\": \"A Dockerfile that builds multiple images\",\n      \"b\": \"A Dockerfile that defines multiple stages for building an image\",\n      \"c\": \"A Dockerfile that uses a different base image for each stage\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  }\n]\n\n\n```",
      ],
    },
    {
      "role": "user",
      "parts": [
        "Agile Model",
      ],
    },
    {
      "role": "model",
      "parts": [
        "```json\n[\n  {\n    \"Q\": \"What is the primary goal of the Agile model in software development?\",\n    \"O\": {\n      \"a\": \"To deliver software quickly and efficiently\",\n      \"b\": \"To create a detailed plan for the entire development process\",\n      \"c\": \"To use waterfall methodology for project management\",\n      \"d\": \"To prioritize documentation over functionality\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"Which of the following is a core principle of Agile development?\",\n    \"O\": {\n      \"a\": \"Individuals and interactions over processes and tools\",\n      \"b\": \"Comprehensive documentation over working software\",\n      \"c\": \"Contract negotiation over customer collaboration\",\n      \"d\": \"Following a rigid plan over responding to change\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is a sprint in Agile development?\",\n    \"O\": {\n      \"a\": \"A short, time-boxed iteration of work\",\n      \"b\": \"A detailed project plan\",\n      \"c\": \"A meeting to discuss project progress\",\n      \"d\": \"A document outlining user requirements\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is a backlog in Agile development?\",\n    \"O\": {\n      \"a\": \"A list of all the tasks to be completed in a project\",\n      \"b\": \"A detailed project plan\",\n      \"c\": \"A document outlining user requirements\",\n      \"d\": \"A report on project progress\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is a daily scrum meeting in Agile development?\",\n    \"O\": {\n      \"a\": \"A meeting to discuss project progress and identify roadblocks\",\n      \"b\": \"A meeting to plan the next sprint\",\n      \"c\": \"A meeting to review user requirements\",\n      \"d\": \"A meeting to document project decisions\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of a sprint review meeting in Agile development?\",\n    \"O\": {\n      \"a\": \"To demonstrate the working software to stakeholders\",\n      \"b\": \"To plan the next sprint\",\n      \"c\": \"To identify and prioritize backlog items\",\n      \"d\": \"To document project decisions\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is the purpose of a sprint retrospective meeting in Agile development?\",\n    \"O\": {\n      \"a\": \"To identify what went well and what could be improved in the sprint\",\n      \"b\": \"To plan the next sprint\",\n      \"c\": \"To demonstrate the working software to stakeholders\",\n      \"d\": \"To document project decisions\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"Which of the following is a popular Agile methodology?\",\n    \"O\": {\n      \"a\": \"Scrum\",\n      \"b\": \"Kanban\",\n      \"c\": \"Extreme Programming (XP)\",\n      \"d\": \"All of the above\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"What is the primary focus of the Kanban methodology?\",\n    \"O\": {\n      \"a\": \"Visualizing work flow and optimizing for continuous delivery\",\n      \"b\": \"Planning and managing work in sprints\",\n      \"c\": \"Prioritizing code quality and simplicity\",\n      \"d\": \"Creating detailed documentation for all project activities\"\n    },\n    \"A\": \"a\"\n  }\n]\n\n```",
      ],
    },
    {
      "role": "user",
      "parts": [
        "python",
      ],
    },
    {
      "role": "model",
      "parts": [
        "```json\n[\n  {\n    \"Q\": \"What is Python?\",\n    \"O\": {\n      \"a\": \"A compiled programming language\",\n      \"b\": \"An interpreted, high-level, general-purpose programming language\",\n      \"c\": \"A low-level programming language\",\n      \"d\": \"A markup language\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"Which of the following is NOT a core data type in Python?\",\n    \"O\": {\n      \"a\": \"int\",\n      \"b\": \"float\",\n      \"c\": \"bool\",\n      \"d\": \"char\"\n    },\n    \"A\": \"d\"\n  },\n  {\n    \"Q\": \"What is the purpose of the 'def' keyword in Python?\",\n    \"O\": {\n      \"a\": \"To define a class\",\n      \"b\": \"To define a function\",\n      \"c\": \"To define a variable\",\n      \"d\": \"To define a loop\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"How do you comment a single line in Python?\",\n    \"O\": {\n      \"a\": \"// This is a comment\",\n      \"b\": \"/* This is a comment */\",\n      \"c\": \"# This is a comment\",\n      \"d\": \"<!-- This is a comment -->\"\n    },\n    \"A\": \"c\"\n  },\n  {\n    \"Q\": \"What does the 'print()' function do in Python?\",\n    \"O\": {\n      \"a\": \"It takes user input\",\n      \"b\": \"It displays output to the console\",\n      \"c\": \"It defines a variable\",\n      \"d\": \"It creates a loop\"\n    },\n    \"A\": \"b\"\n  },\n  {\n    \"Q\": \"What is the purpose of a loop in Python?\",\n    \"O\": {\n      \"a\": \"To execute a block of code repeatedly\",\n      \"b\": \"To define a function\",\n      \"c\": \"To create a class\",\n      \"d\": \"To take user input\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What are the two main types of loops in Python?\",\n    \"O\": {\n      \"a\": \"for and while\",\n      \"b\": \"if and else\",\n      \"c\": \"try and except\",\n      \"d\": \"def and class\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is an 'if' statement used for in Python?\",\n    \"O\": {\n      \"a\": \"To execute a block of code conditionally\",\n      \"b\": \"To create a loop\",\n      \"c\": \"To define a function\",\n      \"d\": \"To define a class\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is a list in Python?\",\n    \"O\": {\n      \"a\": \"An ordered, mutable collection of items\",\n      \"b\": \"An unordered, immutable collection of items\",\n      \"c\": \"A key-value pair data structure\",\n      \"d\": \"A data type for numerical values only\"\n    },\n    \"A\": \"a\"\n  },\n  {\n    \"Q\": \"What is a dictionary in Python?\",\n    \"O\": {\n      \"a\": \"An ordered, mutable collection of items\",\n      \"b\": \"An unordered, immutable collection of items\",\n      \"c\": \"A key-value pair data structure\",\n      \"d\": \"A data type for numerical values only\"\n    },\n    \"A\": \"c\"\n  }\n]\n```",
      ],
    },
  ]
)


app = Flask(__name__) # Folder to store uploaded files
UPLOAD_FOLDER = 'uploads/'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)  # Allowed file extensions for upload

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER # Ensure the upload directory exists
COURSES_FOLDER = os.path.join(UPLOAD_FOLDER+'courses')

def savefile(filename, content):
    if os.path.exists(filename):
        mode = 'a'  # Append to existing file
    else:
        mode = 'w'  # Create a new file

    with open(filename, mode) as f:
        f.write(content)


def allowed_file(filename):
    allowed_extensions = {'txt', 'pdf'}  # Add your allowed file extensions
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions

def extract_text_with_layout(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        text = ""
        for page in pdf.pages:
            text += page.extract_text()  # This extracts text with layout
    return text     # API route to handle file upload and text extraction

def sanitize_filename(filename):
    # Remove invalid characters from the filename
    return re.sub(r'[\\/*?:"<>|]', "", filename)













@app.route('/extract-text', methods=['POST'])
def extract_text():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    
    file = request.files['file']
    
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    if file and file.filename.endswith('.pdf'):        # Extract text from the uploaded PDF
        extracted_text = extract_text_with_layout(file)
        return jsonify({'text': extracted_text}), 200
    
    return jsonify({'error': 'Invalid file format. Please upload a PDF.'}), 400

@app.route('/', methods=['GET', 'POST'])
def home():
    return redirect(url_for('deshboard'),code=302)

@app.route('/dashboard',methods=['GET', 'POST'])
def deshboard():
            # Path to the courses folder
    # courses_folder = os.path.join(os.getcwd(), 'courses')
    # COURSES_FOLDER = os.path.join(UPLOAD_FOLDER+'courses')
    
    # Get a list of all JSON files in the folder
    courses = []
    if os.path.exists(COURSES_FOLDER):
        courses = [f for f in os.listdir(COURSES_FOLDER) if f.endswith('.json')]

    # Pass the course list to the template
    return render_template('dbm.html', courses=courses)
 

@app.route('/courses', methods=['GET','POST'])
def courses():
    course_data = []

    # Loop through all files in the directory
    for filename in os.listdir(COURSES_FOLDER):
        if filename.endswith(".json"):  # Ensure only JSON files are processed
            file_path = os.path.join(COURSES_FOLDER, filename)

            # Open and read the JSON file
            with open(file_path, 'r', encoding='utf-8') as file:
                try:
                    data = json.load(file)
                    # Extract title, description, and file path
                    title = data.get("title", "No Title")
                    description = data.get("description", "No Description")
                    course_data.append({
                        "title": title,
                        "description": description,
                        "dir": filename  # Create the path for the file
                    })
                except json.JSONDecodeError:
                    app.logger.error(f"Error reading JSON file: {filename}")

    # Pass the course data to the template
    return render_template('courses.html', courses=course_data)
@app.route('/add_course', methods=['GET', 'POST'])
def add_course():
    content = ""  # Initialize an empty string for content
    if request.method == "POST":
        # Check if a file is part of the request
        if 'file' not in request.files:
            return "No file part in the request"
        
        file = request.files['file']

        # Check if the user hasn't selected a file
        if file.filename == '':
            return "No selected file"

        # Validate the file extension (implement your `allowed_file` function)
        if file and allowed_file(file.filename):
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)

            # Save the file only if it doesn't already exist
            if not os.path.exists(file_path):
                file.save(file_path)

            # Process the uploaded file (e.g., extract content)
            try:
                raw_content = extract_text_with_layout(file_path)
                clean_content = re.sub(r"```|'''|python|\n", "", raw_content).strip()
                response = formater.generate_content([clean_content])
                content = re.sub(r"```|'''|python|\n", "", response.text).strip()
            except Exception as e:
                app.logger.error(f"Error processing the file: {str(e)}")
                return "Error processing the uploaded file"

    # Render the upload_form.html template with the processed content
    return render_template('upload_form.html', content=content)

@app.route("/roadmap",methods=['GET', 'POST'])
def roadmap():
    data = request.form['content'] #request.form['key']
    rdmap = ast.literal_eval(data)
    filename = sanitize_filename(rdmap['title'].replace(' ','-'))
    JSON_FILE = os.path.join(UPLOAD_FOLDER+'courses', filename+'.json')
    with open(JSON_FILE, 'w') as file:
        json.dump(rdmap, file)
    # Load roadmap data from a JSON file
    # with open('roadmap.json', 'r') as f:
        # roadmap = json.load(f)
    
    return render_template("roadmap.html", roadmap=rdmap)
           
@app.route('/roadmap/p/<course>', methods=['GET'])
def roadmap_course(course):
    # Define the directory where your courses are stored
    # courses_folder = os.path.join(os.getcwd(), 'courses')
    
    # Construct the full path to the file
    file_path = os.path.join(COURSES_FOLDER, course)
    
    # Check if the file exists and is a valid JSON file
    if not os.path.exists(file_path) or not course.endswith('.json'):
        return abort(404, description="File not found or invalid format.")
    
    try:
        # Open the file and load its content
        with open(file_path, 'r') as f:
            data = json.load(f)  # Assuming the file contains JSON data
    except Exception as e:
        return f"Error loading file: {e}", 500

    # Render a template or return data (for example purposes, I'll return JSON data)
    return render_template('roadmap.html', roadmap=data)

Qlist=[]
@app.route('/quiz', methods=['POST'])
def quiz():
    topic = request.form.get('topic')
    response = chat_session.send_message(topic)
    lst = ast.literal_eval(response.text)
    if isinstance(lst, list):
        JSON_FILE = os.path.join(UPLOAD_FOLDER+'questions', topic.replace(' ','-')+'.json')
        with open(JSON_FILE, 'w') as file:
            json.dump(lst, file)
        Qlist.extend(lst)
        return render_template('quize.html',topic=topic,questions=lst)
    else:
      return f"<p>{response.text}</p>"

def checkscore(ans, value, lst=Qlist):
    if 0 <= key < len(lst):
        if lst[key]['A'] == value:  # Accessing the correct index and key
            return True
        else:
            return False
    else:
        raise IndexError(f"Key {key} is out of bounds for lst of size {len(lst)}")

@app.route('/score', methods=['POST'])
def score():
    no_ques = len(Qlist)
    answer = [Qlist[k]['A'] for k in range(len(Qlist))]
    corr_ans = 0
    mark = 2
    score = 0
    atmp_ques = 0
    wrng_attmp = []
    if request.method == 'POST':
        myAnswer = [value for key, value in request.form.items()]
        atmp_ques = len(answer)
        atmp_ques = len(myAnswer)
        print('no of question in list',len(Qlist)," no of ans:",len(myAnswer))
        print(answer)
        print(myAnswer)
        for i in range(len(answer)):
            if answer[i] == myAnswer[i]:
                corr_ans +=1
                score+=mark
            else:
                wrng_attmp.append(i)
       
    wrng_ans = no_ques - corr_ans
    result_data = {
        "total_questions": no_ques,
        "correct_answers": corr_ans,
        "wrong_answers": wrng_ans,
        "total_score": score,
        "wrong_questions": wrng_attmp
    }
    return render_template('result.html', **result_data)

if __name__ == '__main__':
    app.run(debug=True,port=8000)
    